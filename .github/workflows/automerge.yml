name: Auto-merge PRs with [automerge] tag

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
  check_suite:
    types: [completed]
  workflow_run:
    workflows: ["*"]
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - name: Auto-merge PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request?.number || 
                            context.payload.workflow_run?.pull_requests?.[0]?.number ||
                            context.payload.check_suite?.pull_requests?.[0]?.number;
            
            if (!prNumber) {
              console.log('No PR number found in this event');
              return;
            }

            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            console.log(`PR #${prNumber}: "${pr.title}"`);
            console.log(`Base branch: ${pr.base.ref}`);
            console.log(`State: ${pr.state}`);
            console.log(`Mergeable: ${pr.mergeable}`);

            // Check conditions
            if (!pr.title.includes('[automerge]')) {
              console.log('PR title does not contain [automerge], skipping');
              return;
            }

            if (pr.base.ref !== 'main') {
              console.log(`Base branch is ${pr.base.ref}, not main. Skipping automerge.`);
              return;
            }

            if (pr.state !== 'open') {
              console.log('PR is not open, skipping');
              return;
            }

            // Approve the PR
            try {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE'
              });
              console.log('PR approved');
            } catch (error) {
              console.log('Failed to approve (might already be approved):', error.message);
            }

            // Attempt merge with retries
            const maxRetries = 3;
            const retryDelay = 5000; // 5 seconds

            for (let attempt = 1; attempt <= maxRetries; attempt++) {
              try {
                console.log(`Merge attempt ${attempt}/${maxRetries}`);
                
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  merge_method: 'squash'
                });
                
                console.log('PR merged successfully!');
                return;
              } catch (error) {
                console.log(`Merge attempt ${attempt} failed:`, error.message);
                
                if (attempt < maxRetries) {
                  console.log(`Waiting ${retryDelay/1000}s before retry...`);
                  await new Promise(resolve => setTimeout(resolve, retryDelay));
                } else {
                  // Final attempt failed, leave a comment
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `⚠️ Automerge failed after ${maxRetries} attempts.\n\nReason: ${error.message}\n\nThis might be due to:\n- Pending workflow approvals\n- Merge conflicts\n- Required checks not yet completed\n\nPlease merge manually or wait for checks to complete.`
                  });
                  throw error;
                }
              }
            }
